{{ template "base" . }}

{{ define "title" }}
    Virtual Terminal
{{ end }}

{{ define "style" }}
<style>
    .my-control {
        display: block;
    }
    .my-focus {
        outline: 0;
        border-color: #485fc7;
        box-shadow: 0 0 0 0.125em rgb(72 95 199 / 25%);
    }
</style>
{{ end }}

{{ define "content" }}
<h2 class="has-text-centered mt-3">Virtual Terminal</h2>
<hr>
<div class="notification is-danger-is-light is-invisible" id="card-messages"></div>
<form action="" method="post"
    name="charge_form" id="charge-form"
    class="block field" autocomplete="off"
    novalidate=""
    >

    <div class="field">
        <label for="amount" class="label">Amount</label>
        <div class="control has-icons-right">
            <input type="text" class="input" placeholder="2000" 
                id="amount" name="amount" required="" automcomplete="amount-new">
            <span class="icon is-small is-right">
                <i id="amount-icon" class="fas is-hidden"></i>
            </span>
            <p id="amount-message" class="help is-invisible"></p>
        </div>
    </div>
    
    <div class="field">
        <label for="cardholder-name" class="label">Cardholder Name</label>
        <div class="control has-icons-right">
            <input type="text" class="input" placeholder="John Doe" 
                id="cardholder-name" name="cardholder_name" required="" 
                autocomplete="cardholder-name-new">
            <span class="icon is-small is-right">
                <i id="cardholder-name-icon" class="fas is-hidden"></i>
            </span>
            <p id="cardholder-name-message" class="help is-invisible"></p>
        </div>
    </div>

    <div class="field">
        <label for="cardholder-email" class="label">Cardholder Email</label>
        <div class="control has-icons-right">
            <input type="text" class="input" placeholder="johndoe@email.com" 
                id="cardholder-email" name="cardholder_email" required="" 
                autocomplete="cardholder-email-new">
            <span class="icon is-small is-right">
                <i id="cardholder-email-icon" class="fas is-hidden"></i>
            </span>
            <p id="cardholder-email-message" class="help is-invisible"></p>
        </div>
    </div>

    <!-- card number will be built by stripe-->
    <div class="field">
        <label for="card-element" class="label">Credit Card</label>
        <div class="control">
            <div class="input my-control" id="card-element"></div>
        </div>
        <p id="card-errors" class="help is-invisible" role="alert"></p>
    </div>

    <hr>
    
    <div class="field">
        <div class="control">
            <button id="pay-button" class="button is-link" onclick="val()">Submit</button>
        </div>
    </div>

    <div id="processing-payment" class="is-invisible has-text-centered"></div>

</form>
{{ end }}


{{ define "js" }}
    <script src="https://js.stripe.com/v3/"></script>
    <script src="https://kit.fontawesome.com/881c30fcf9.js" crossorigin="anonymous"></script>
    <script>
        let card;
        let stripe;
        const cardMessages = document.getElementById('card-messages');
        const payButton = document.getElementById('pay-button');
        const processing = document.getElementById('processing-payment');
        const element = {
            amount: { 
                input: document.getElementById('amount'),
                icon: document.getElementById('amount-icon'),
                message: document.getElementById('amount-message'),
                messageContent: "Enter the amount.",
            },
            cardHolderName: {
                input: document.getElementById('cardholder-name'),
                icon: document.getElementById('cardholder-name-icon'),
                message: document.getElementById('cardholder-name-message'),
                messageContent: "Enter cardholder name",
            },  
            cardHolderEmail: {
                input: document.getElementById('cardholder-email'),
                icon: document.getElementById('cardholder-email-icon'),
                message: document.getElementById('cardholder-email-message'),
                messageContent: "Enter cardholder email address.",
            }
        }

        stripe = Stripe('pk_test_51Kl2VvDquGWD6r4e1tc4qI2sfS4WhZR8OyGyzgbyEKAcxiu1TJWVu8XhBD7aPgF3C8uO2eUF8dSTFYfJprTAcgCF009SVnSsXu')
        
        function val() {
            let form = document.getElementById('charge-form')
            let amountElement = document.getElementById('amount')
  
            if (form.checkValidity() === false) {
                this.event.preventDefault()
                this.event.stopPropagation()
                validateEmpty(element.amount)
                validateEmpty(element.cardHolderName)
                validateEmpty(element.cardHolderEmail)
                return
            }
            this.event.preventDefault()
            isSuccess()
            return
        }
        

        function validateEmpty(element) {
            if (element.input && !element.input.value) {
                element.input.classList.add('is-danger')
                element.input.classList.remove('is-success')
                element.icon.classList.add('fa-exclamation-triangle')
                element.icon.classList.remove('is-hidden', 'fa-check')
                element.message.classList.add('is-danger')
                element.message.textContent = 'The field cannot be empty.'
                element.message.classList.remove('is-invisible')
            }else {
                element.input.classList.remove('is-danger')
                element.input.classList.add('is-success')
                element.icon.classList.remove('is-hidden', 'fa-exclamation-triangle')
                element.icon.classList.add('fa-check')
                element.message.classList.remove('is-danger', 'is-invisible')
                element.message.classList.add('is-success')
                element.message.textContent = element.messageContent

            }
        }

        element.amount.input.addEventListener('change', function(event) {
            validateEmpty(element.amount)
        })

        element.cardHolderName.input.addEventListener('change', function(event){
            validateEmpty(element.cardHolderName)
        })

        element.cardHolderEmail.input.addEventListener('change', function(event){
            validateEmpty(element.cardHolderEmail)
        })

        function isSuccess() {
            elements = document.getElementsByClassName('fa-check')
            for(let item of elements) {
                item.classList.remove('is-hidden')
            }
        }

        (function(){
            // create stripe and elements
            const elements = stripe.elements()
            const style = {
                base: {
                    fontSize: '16px',
                    lineHeight: '24px',
                }
            };
            
            // create card entry
            card = elements.create('card', {
                style: style,
                hidePostalCode: true,
            });

            
            card.mount('#card-element');
            
            // TODO: element focus for some reason will not invoke
            // The lines 110-115 below serves as a workaround to add :focus css
            // however, due to :hover specificity, when hovering over, the css gets
            // overriden. 
            // 1. Find a way to invoke focus or make sure that css of :hover and :focus will work
            card.addEventListener('focus', function(event){
                document.getElementById('card-element').classList.add('my-focus');
            });
            card.addEventListener('blur', function(event){
                document.getElementById('card-element').classList.remove('my-focus');
            });
           

            //check for input errors
            card.addEventListener('change', function(event) {
                let message = document.getElementById('card-errors')
                let cardElement = document.getElementById('card-element')
                if (event.error) {
                    cardElement.classList.add('is-danger')
                    cardElement.classList.remove('is-success')
                    message.classList.remove('is-invisible', 'is-success')
                    message.classList.add('is-danger')
                    message.textContent = event.error.message
                } else {
                    cardElement.classList.remove('is-danger')
                    cardElement.classList.add('is-success')
                    message.classList.add('is-success')
                    message.classList.remove('is-invisible', 'is-danger')
                    message.textContent = 'Valid credit card info'
                }
            });

            
        })()
    </script>
{{ end }}